{"version":3,"sources":["images/Background.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","require","name","employeeID","App","useState","employees","setEmployees","tempText","setTempText","tempColor","setTempColor","compare","a","b","properties","emp_id","low","toLowerCase","get","res","temp","JSON","parse","data","sort","className","style","backgroundImage","backgroundSize","height","width","opacity","color","fontSize","margin","Grid","container","spacing","item","xs","justify","class","id","type","placeholder","onChange","val","target","value","parseInt","tabindex","onClick","isNaN","console","log","params","post","then","msg","createEmployee","backgroundColor","marginTop","getEmployees","overflow","maxHeight","itemRenderer","index","key","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.860917bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Background.84423503.jpg\";","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport ReactList from 'react-list';\n\nconst axios = require('axios');\n\nvar name = \"\";\nvar employeeID = null;\n\nfunction App() {\n\n  const [employees, setEmployees] = useState([]);\n  const [tempText, setTempText] = useState(\"\");\n  const [tempColor, setTempColor] = useState(\"\");\n\n  function compare(a, b) {\n    if (a.properties.emp_id.low > b.properties.emp_id.low) {\n      return 1\n    }\n    if (a.properties.emp_id.low < b.properties.emp_id.low) {\n      return -1\n    }\n    if (a.properties.name.toLowerCase() > b.properties.name.toLowerCase()) {\n      return 1\n    }\n    if (b.properties.name.toLowerCase() > a.properties.name.toLowerCase()) {\n      return -1\n    }\n    return 0\n  }\n\n  function createEmployee() {\n\n    if (name === \"\" || employeeID == null || isNaN(employeeID) == true) {\n      console.log(\"invalid input\");\n      setTempText(\"Invalid input\");\n      setTempColor(\"red\");\n      return;\n    }\n    var params = { name: name, id: employeeID };\n\n    console.log(name, employeeID)\n    const res = axios.post('/createEmployee', {\n      params: params\n    }).then((msg) => {\n      console.log(msg);\n      name = \"\";\n      employeeID = \"\";\n      setTempText(\"Employee created!\");\n      setTempColor(\"green\");\n    })\n  }\n\n  async function getEmployees() {\n    const res = await axios.get('/getAllEmployees')\n    var temp = JSON.parse(res.data);\n    temp.sort(compare);\n    setEmployees(temp);\n    setTempText(\"Employees received\");\n    setTempColor(\"#4888AD\");\n  }\n\n  function renderItem(index, key) {\n    return (<div key={key} style={{ color: \"black\" }}>\n      <div class=\"ui animated button\" style={{ width: \"400px\", height: \"55px\", backgroundColor: \"#DCDCDC\", margin: \"2px\" }}>\n        <div style={{ color: \"#778899\" }}>{employees[index].properties.emp_id.low}</div>\n        <div style={{ margin: \"2px\" }}>{employees[index].properties.name}</div>\n      </div>\n    </div>);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{\n          backgroundImage: 'url(' + require('./images/Background.jpg') + ')',\n          backgroundSize: 'cover',\n          height: '100vh',\n          width: '100vw',\n          opacity: '1'\n        }}>\n          <h1 style={{ color: \"#2F4F4F\", fontSize: \"45px\", margin: \"20px\" }}>Employee Portal</h1>\n\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Grid container justify=\"center\" spacing={2}>\n                <div class=\"ui left icon input\" id=\"enterName\">\n                  <input type=\"text\" placeholder=\"Enter name\" onChange={(val) => {\n                    name = val.target.value; setTempText(\"\")\n                      ;\n                  }}></input>\n                  <i class=\"users icon\"></i>\n                </div>\n\n                <div class=\"ui input\" id=\"enterID\">\n                  <input type=\"text\" placeholder=\"Enter ID\" onChange={(val) => {\n                    employeeID = parseInt(val.target.value); setTempText(\"\")\n                      ;\n                  }}></input>\n                </div>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container justify=\"center\" spacing={2} style={{ margin: \" 20px\" }}>\n                <div class=\"ui animated button\" tabindex=\"0\" onClick={() => { createEmployee() }}\n                  style={{ backgroundColor: \"#2F4F4F\t\", width: \"150px\", height: \"60px\", color: \"white\" }}>\n                  <div class=\"visible content\" style={{ color: \"white\", marginTop: \"10px\" }}>Create a Record</div>\n                  <div class=\"hidden content\">\n                    <i class=\"right arrow icon\" style={{ color: \"white\" }}></i>\n                  </div>\n                </div>\n                <button class=\"ui secondary button\" onClick={() => { getEmployees() }}\n                  style={{ width: \"150px\", height: \"60px\" }}>\n                  Get All Records\n          </button>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n\n\n              {/* {employees} */}\n              <div style={{ overflow: 'auto', maxHeight: 400 }}>\n                <ReactList\n                  itemRenderer={renderItem}\n                  length={employees.length}\n                  type='uniform'\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12}>\n              <div style={{ color: tempColor }}>\n                {tempText}\n              </div>\n            </Grid>\n          </Grid>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}